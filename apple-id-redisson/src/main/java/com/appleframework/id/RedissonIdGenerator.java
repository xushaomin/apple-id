package com.appleframework.id;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;

import org.redisson.Redisson;
import org.redisson.api.RAtomicLong;
import org.redisson.api.RedissonClient;
import org.redisson.config.Config;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * This id generator utilizes Redis (http://redis.io/) to generate serial IDs.
 * 
 * <p>
 * Persistency: IDs generated by this id-generator are persistent (assuming the
 * Redis backend runs in persistent mode).
 * </p>
 * 
 * @author cruise.xu
 * @since 0.1.0
 */
public class RedissonIdGenerator extends SerialIdGenerator implements IdentityGenerator {

	private static Logger logger = LoggerFactory.getLogger(RedissonIdGenerator.class);  

	private RedissonClient redisson;
	
    /**
     * Helper method to obtain {@link RedissonIdGenerator}.
     * 
     * @param redisHost
     * @param redisPort
     * @param redisUser
     * @param redisPassword
     * @param redisPoolConfig
     * @return
     */
    public static RedissonIdGenerator getInstance(final Config config) {
        StringBuilder key = new StringBuilder();
        key.append(config.toString());
        try {
            RedissonIdGenerator idGen = (RedissonIdGenerator) idGenerators.get(key.toString(),
                    new Callable<SerialIdGenerator>() {
                        @Override
                        public SerialIdGenerator call() throws Exception {
                            RedissonIdGenerator idGen = new RedissonIdGenerator();                            
                            RedissonClient redisson = Redisson.create(config);
                            idGen.setRedisson(redisson);
                            return idGen;
                        }
                    });
            return idGen;
        } catch (ExecutionException e) {
            logger.warn(e.getMessage(), e);
            return null;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedissonIdGenerator init() {
		Version.logVersion();
        super.init();
        return this;
    }

    public void destroy() {
        try {
        	redisson.shutdown();
        } catch (Exception e) {
            logger.warn(e.getMessage(), e);
        }
        super.destroy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long nextId(final String namespace) {
    	RAtomicLong ra = redisson.getAtomicLong(namespace);
    	return ra.incrementAndGet();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long currentId(final String namespace) {
    	RAtomicLong ra = redisson.getAtomicLong(namespace);
    	return ra.get();
    }

    /**
     * {@inheritDoc}
     * 
     * @since 0.4.0
     */
    @Override
    public boolean setValue(final String namespace, final long value) {
    	RAtomicLong ra = redisson.getAtomicLong(namespace);
    	ra.set(value);
    	return true;
    }

	public void setRedisson(RedissonClient redisson) {
		this.redisson = redisson;
	}
    
}